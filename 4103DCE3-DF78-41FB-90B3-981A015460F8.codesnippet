<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string></string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>

/*
 Given two strings a and b, return the length of the longest uncommon subsequence between a and b. If the longest uncommon subsequence does not exist, return -1.
 An uncommon subsequence between two strings is a string that is a subsequence of one but not the other.
 
 A subsequence of a string s is a string that can be obtained after deleting any number of characters from s.
 */

import Foundation
class Solution {
    func findLUSlength(_ a: String, _ b: String) -&gt; Int {
        var aEnd = a.count; var aStart = 0
        var bEnd = b.count; var bStart = 0
        var count = 0
        let aa = Array(a)
        let ab = Array(b)
        while (aStart &lt; aEnd) {
            count += aStart
            while (bStart &lt; bEnd){
                if (aa[aStart] == ab[bStart]) {
                    bStart += 1
                    aStart += 1
                }
                aStart = count
                 bStart += 1
            }
                bStart += 1
                aStart += 1
        }
            return count
        }
    }
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>4103DCE3-DF78-41FB-90B3-981A015460F8</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>Longest UnCommon Sequence</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
