<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string></string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>//
//  FormatterExtensions.swift
//  NYCSchoolFetcher
//
//  Created by Adel Al-Aali on 2/22/23.
//


import Foundation
import UIKit

// MARK: Convert Int to String- Date/Time format
extension Int {
    var formatIntToDateTime: String {
        let(h,m,s) = (self / 3600, (self % 3600) / 60, (self % 3600) % 60)

        let h_string = h &lt; 10 ? "0\(h)" : "0\(h)"
        let m_string = m &lt; 10 ? "0\(m)" : "0\(m)"
        let s_string = s &lt; 10 ? "0\(s)" : "0\(s)"
        return "\(h_string):\(m_string):\(s_string)"
    }
}


//MARK:  [UIColor ] Specificing Red / Green hexColors for
extension UIColor {
    static let losingRed = UIColor("fae2e1")
    static let winningGreen = UIColor("b0f1dd")

    convenience init(_ hex: String, alpha: CGFloat = 1.0) {
        var cString: String = hex.trimmingCharacters(in: .whitespacesAndNewlines).uppercased()

        if(cString.hasPrefix("#")) { cString.removeFirst() }

        if ((cString.count) != 6) {
            self.init("ff0000")
            return
        }

        var rgbValue: UInt64 = 0
        Scanner(string: cString).scanHexInt64(&amp;rgbValue)

        self.init(red: CGFloat((rgbValue &amp; 0xFF0000) &gt;&gt; 16) / 255.0,
                  green: CGFloat((rgbValue &amp; 0x00FF00) &gt;&gt; 8) / 255.0,
                  blue: CGFloat(rgbValue &amp; 0x0000FF) / 255.0,
                  alpha: alpha)
    }
}





// MARK: To convert Double to String with two decimal places &amp;&amp; Formats Double to Currency (String)
extension Double {
    var string2doublePlaceholder2: String  {
        return String(describing: self)
    }
    var twoDecimalPlaceholder : String {
        return String(format: "%.2f", self)
    }
    var formatDouble2Currency : String {
        let formatter = NumberFormatter()
        formatter.numberStyle = .currency

        if let val = formatter.string(from: self as NSNumber) {
            return val
        }
        return twoDecimalPlaceholder
    }

    // MARK: Converts Double to A Percent (String) w/ Two decimal placeholders
    var convertDouble2StrPercent : String {
        let formatter = NumberFormatter()
        formatter.numberStyle = .percent
        formatter.maximumFractionDigits = 2
        return formatter.string(from: self as NSNumber) ?? self.convertDouble2StrPercent
    }

    // MARK: Function that checks for dollar symbol, and decimal placeholders; if true, then reset
    func removeSymbolandDecimal(hasSymbol: Bool = true, hasDecimalHolder: Bool = true) -&gt; String {
        let formatter = NumberFormatter()
        formatter.numberStyle = .currency
        if hasSymbol == false {
            formatter.currencySymbol = ""
        }
        if hasDecimalHolder == false {
            formatter.maximumFractionDigits = 0
        }
        return formatter.string(from: self as NSNumber) ?? twoDecimalPlaceholder
    }

}




// MARK: To extend INT to Float [floatVal]
extension Int {
    var floatVal : Float {
        return Float(self)
    }
}


// MARK: TO Convert Int to Double
extension Int {
    var convertInt2Double : Double {
        return Double(self)
    }
}

// MARK: Convert Double to Percent (2 decimal placeholders)


// MARK: Convert Double to String
extension Double {
    var convertDouble2String : String {
        return String(describing: self)
    }
}

// MARK: Convert String to Double
extension String {
    var convertString2Double : Double {
        return Double(self) ?? 0
    }
}

// MARK: Extension [date to string]
extension Date {
    var dateFormatter : String {
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "MMMM yyyy"
        return dateFormatter.string(from: self)
    }
}

// MARK: TO add Brackets to string
extension String {
    func addBrackets() -&gt; String {
        return "(\(self))"
    }
}
//MARK: Navcon extension : UIViewController



// MARK: Extensions for random Int and Double
extension Int {
    var randomInt: Int {
        if self &gt; 0 {
            return Int(arc4random_uniform(UInt32(self)))
        } else if self &lt; 0 {
            return -Int(arc4random_uniform(UInt32(abs(self))))
        } else {
            return 0
        }
    }
}

/// TO MAKE RANDON DOUBLE
extension Double {
    var randomDouble: Double {
        if self &gt; 0 {
            return Double(arc4random_uniform(UInt32(self)))
        } else if self &lt; 0 {
            return -Double(arc4random_uniform(UInt32(abs(self))))
        } else {
            return 0
        }
    }
}


// MARK: Populates done button for user in text fields
extension UITextField {
    func addDoneBtn () {
        let screenWidth = UIScreen.main.bounds.width
        let doneToolBar = UIToolbar(frame: .init(x: 0, y:0, width: screenWidth, height: 50 ))
        doneToolBar.barStyle = .default
        let flexBarBtnItem = UIBarButtonItem(barButtonSystemItem : .flexibleSpace, target : nil, action : nil )
        let doneBarItem = UIBarButtonItem(title : "Done", style: .done, target: self, action: #selector(dismissKeyboard))

        let items = [flexBarBtnItem, doneBarItem]
        doneToolBar.items = items

        doneToolBar.sizeToFit()
        inputAccessoryView = doneToolBar
    }

    @objc private func dismissKeyboard() {
        resignFirstResponder()

    }
}


 // MARK: Random Int / CGFloat / Double extensions
extension CGFloat {
    var arc4random: CGFloat {
        if self &gt; 0 {
            return CGFloat(arc4random_uniform(UInt32(self)))
        } else if self &lt; 0 {
            return -CGFloat(arc4random_uniform(UInt32(abs(self))))
        } else {
            return 0
        }
    }
}




</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>7D015499-4F0E-4ADE-AC60-A68FD7D93281</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>FORMATTER  - MASTER LIST </string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
