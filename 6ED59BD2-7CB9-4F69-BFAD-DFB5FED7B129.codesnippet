<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string></string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>import Foundation

// The extension takes in anyfile (generics), and will crash the program if any information is loaded thats not on the model

extension Bundle {
    func decode&lt;T: Decodable&gt;(file: String) -&gt; T {
        
        // gets file and returns the type
        guard let url = self.url(forResource: file, withExtension: nil) else {
            fatalError("[Fetch Error] Could not find: \(file)")
        }
        guard let data = try? Data(contentsOf: url ) else {
            fatalError("[Data Error] Could Not Load: \(file)")
        }
        
        // guard for decoding files
        let decoder = JSONDecoder()
        guard let loadedData = try? decoder.decode(T.self, from: data) else {
            fatalError("[Data Error] Could decode file: \(file)")
        }
        return loadedData
    }
}

struct User : Codable {
    var title, body : String
    var id : Int
    
    // init test for extension Bundle (decodable)
    static let allUsers : [User] = Bundle.main.decode(file: "Test.json")
    static let firstUser = allUsers[0]
}

</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>6ED59BD2-7CB9-4F69-BFAD-DFB5FED7B129</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>JSON - Fetch, Parse, Load Data</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
